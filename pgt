#! /bin/sh

# TODO:
# add emulator handling
# add check build files needed
# add failed build check

CURRENT_DIRECTORY=${PWD}
CURRENT_DIRECTORY_NAME=${PWD##*/}
PGT_DIRECTORY=$(cd -P -- "$(dirname -- "$0")" && pwd -P)

if [[ !(-d $PGT_DIRECTORY) ]]; then
	echo "\\033[0;31m""Error: folder $PGT_DIRECTORY doesn't exist""\\033[0;37m"
	echo "Please verify if you add correctly the path of PGT"
	exit
fi

# load config file
. $PGT_DIRECTORY/config

# load the colors
. $PGT_DIRECTORY/tools/colors

# load the logs tools
. $PGT_DIRECTORY/tools/log

if [[ !(-d $CALLBACK_ANDROID_PATH) ]]; then
	log_error "folder $CALLBACK_ANDROID_PATH doesn't exist"
	echo "Please change CALLBACK_ANDROID_PATH in the config file and specify the correct path"
	exit
fi

# defaults
create=off
build=off
deploy=off
run=off
target="device"
log="debug"

function check_devices
{
	adb devices
	if [ "$(adb devices)" = "List of devices attached " ]; then

		# restart brige
		adb kill-server
		adb start-server

		# still no devices
		if [ "$(adb devices)" = "List of devices attached " ]; then
			# No devices attached found
			return 1
		fi
	fi

	# Found at least one attached device
	return 0
}

function get_first_online_device
{
	devices=$(check_devices)
	if [[ !(devices) ]]; then
		return 1
	else
		echo $devices
		old_IFS=$IFS
		IFS=$'\n'
		i=0
		target=""
		# each devices
		for line in $(adb devices)
		do
			((i++))

			# skip the first line
			if [ $i = 1 ]; then
			 continue
			fi

			IFS=$old_IFS
			# each part of the device
			for word in $line
			do
				if [ "$target" = "" ]; then
					target=$word

				elif [ "$word" = "offline" ]; then
					target=""
				elif [ "$word" = "device" ]; then
					break 2
				fi
			done
		done
		IFS=$old_IFS
	fi
}

function get_target
{
	# check devices

	# build on specific target
	if [[ !("$TARGET" = "") && !("$TARGET" = "device") && !("$TARGET" = "emulator") ]]; then
		targetoption="-s $TARGET"

	# build on usb device
	elif [[ ("$TARGET" = "device") ]]; then
		targetoption="-d"

	# build on emulator
	elif [[ ("$TARGET" = "emulator") ]]; then
		targetoption="-e"

	# build on something
	else
		get_first_online_device

		if [[ $TARGET = "" ]]; then
			echo "Error: no online device found"
			exit
		fi

		targetoption="-s $TARGET"
	fi
}

function check_pgt_config
{
	if [ ! -f "$CONFIG_FILE" ]; then
		# config file doesn't exist
		log_error "the pgt config file does not exist, please use pgt config to create it."
		exit
	fi

	. $CONFIG_FILE
}

function run_action
{
	. $PGT_DIRECTORY/actions/$1
	pgt_$1 $@
}

# available options
# -path
# -target
# -help
# -log
# -no-log
# -no-phonegap
# -activity
# -package
# -apk
# -phonegap-version
# -builder
# -www-folder

# A string with command options
options=$@

# An array with all the arguments
arguments=($options)

# Loop index
index=0

for argument in $options
	do
		# Incrementing index
		index=`expr $index + 1`

		# The conditions
		case $argument in
			-help|--help|-h)
				# start the help but can be a request to a specific action
				exit
			;;
			# project path for external calls
			-path)
				PROJECT_PATH=${arguments[index]}
				if [[ !(-d $PROJECT_PATH) ]]; then
					log_error "project path $PROJECT_PATH doesn't exist"
					exit
				fi
				echo cd $PROJECT_PATH
				cd $PROJECT_PATH
			;;
			-target) TARGET=${arguments[index]} ;;
			-log) LOG=${arguments[index]} ;;
			-no-log) LOG=false ;;
			-no-phonegap)
				PHONEGAP=false
				APP_FOLDER="."
			;;
			-activity) ACTIVITY=${arguments[index]} ;;
			-package) PACKAGE=${arguments[index]} ;;
			-apk) APK=${arguments[index]} ;;
			-phonegap-version) PHONEGAP_VERSION=${arguments[index]} ;;
			-builder) BUILDER=${arguments[index]} ;;
			-www-folder) WWW_DIR=${arguments[index]} ;;
		esac
done

# actions which need config
case $1 in
	build|compil|deploy|run|debug|start|stop|uninstall|clean)
		check_pgt_config
		;;
esac

# switch action
case $1 in
	config|set|create|build|compil|deploy|run|debug|start|stop|uninstall|clean|devices)
		run_action $@
		exit
		;;
esac

log_error "invalid action: $1"
exit 1