#! /bin/sh

# todo:
# 	update to use:
# 		pgt create
# 		pgt build
# 		pgt compil
# 		pgt run
# 		pgt deploy
# 		pgt debug => all

# 		options
# 			pgt build --path "my_project"
# 			pgt run --target "my_target"
# 			pgt run --log "debug"

# 	stop when build crash

# 	add
# 		pgt start
# 		pgt start --activity "my_activity"
# 		pgt start --activity "my_activity" --nolog

# 		pgt stop
# 		pgt stop --activity "my_activity" --package

# 		pgt clean
# 			ant clean

# ona pour chaque action des options mais pour debug, on a toutes les actions
# donc la first string est laction
# on doit recuperer la liste des options

CURRENT_DIRECTORY=${PWD}
CURRENT_DIRECTORY_NAME=${PWD##*/}
PGT_DIRECTORY=$(cd -P -- "$(dirname -- "$0")" && pwd -P)

if [[ !(-d $PGT_DIRECTORY) ]]; then
	echo "\\033[0;31m""Error: folder $PGT_DIRECTORY doesn't exist""\\033[0;37m"
	echo "Please verify if you add correctly the path of PGT"
	exit
fi

# load config file
. $PGT_DIRECTORY/config

# load the colors
. $PGT_DIRECTORY/tools/colors

# load the logs tools
. $PGT_DIRECTORY/tools/log

if [[ !(-d $CALLBACK_ANDROID_PATH) ]]; then
	log_error "folder $CALLBACK_ANDROID_PATH doesn't exist"
	echo "Please change CALLBACK_ANDROID_PATH in the config file and specify the correct path"
	exit
fi

# defaults
create=off
build=off
deploy=off
run=off
target="device"
log="debug"

function check_devices
{
	adb devices
	if [ "$(adb devices)" = "List of devices attached " ]; then

		# restart brige
		adb kill-server
		adb start-server

		# still no devices
		if [ "$(adb devices)" = "List of devices attached " ]; then
			# No devices attached found
			return 1
		fi
	fi

	# Found at least one attached device
	return 0
}

function get_first_online_device
{
	devices=$(check_devices)
	if [[ !(devices) ]]; then
		return 1
	else
		echo $devices
		old_IFS=$IFS
		IFS=$'\n'
		i=0
		target=""
		# each devices
		for line in $(adb devices)
		do
			((i++))

			# skip the first line
			if [ $i = 1 ]; then
			 continue
			fi

			IFS=$old_IFS
			# each part of the device
			for word in $line
			do
				if [ "$target" = "" ]; then
					target=$word

				elif [ "$word" = "offline" ]; then
					target=""
				elif [ "$word" = "device" ]; then
					break 2
				fi
			done
		done
		IFS=$old_IFS
	fi
}

function get_target
{
	# check devices

	# build on specific target
	if [[ !("$target" = "") && !("$target" = "device") && !("$target" = "emulator") ]]; then
		targetoption="-s $target"

	# build on usb device
	elif [[ ("$target" = "device") ]]; then
		targetoption="-d"

	# build on emulator
	elif [[ ("$target" = "emulator") ]]; then
		targetoption="-e"

	# build on something
	else
		get_first_online_device

		if [[ $target = "" ]]; then
			echo "Error: no online device found"
			exit
		fi

		targetoption="-s $target"
	fi
}

function get_config
{
	if [ "$ACTIVITY" = "" ]; then
		cd android/
		echo "Getting phonegap config file..."
		# get phonegap config file
		. ./.phonegap/config
		# get pgt config file
		echo "Getting PGT config file..."
		. ./.pgt/config
		cd ..
	fi
}

function check_folder_android
{
	if [[ !(-d android/) ]]; then
		echo "Error: folder android doesn't exist"
		exit
	elif [[ (-z $(ls android/)) ]]; then
		echo "Error: folder android is empty"
		exit
	fi
}

function run_action
{
	. $PGT_DIRECTORY/actions/$1
	$1
}

# level to high
if [ ${PWD##*/} = "android" ]; then
	echo "Going to parent directory"
	cd ..
fi

# available options
# -path
# -target
# -help
# -log
# -nolog

HELP=false
TARGET=""
LOG="debug"

# A string with command options
options=$@

# An array with all the arguments
arguments=($options)

# Loop index
index=0

for argument in $options
	do
		# Incrementing index
		index=`expr $index + 1`

		# The conditions
		case $argument in
			-help|--help|-h) HELP=true ;;
			# project path for external calls
			-path)
				PROJECT_PATH=${arguments[index]}
				if [[ !(-d $PROJECT_PATH) ]]; then
					log_error "project path $PROJECT_PATH doesn't exist"
					exit
				fi
				echo cd $PROJECT_PATH
				cd $PROJECT_PATH
			;;
			-target) TARGET=${arguments[index]} ;;
			-logpgt) LOG=${arguments[index]} ;;
			-nolog) LOG=false ;;
		esac
done

# switch option
case $1 in
	create|build|compil|deploy|run|debug|start|stop|uninstall|clean)
		run_action $1
		exit
		;;
esac

log_error "invalid action: $1"
exit 1